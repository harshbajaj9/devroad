// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = "postgresql://postgres.bpjamnbsvejltiahvsmi:COUp3fbQV68t@aws-0-ap-south-1.pooler.supabase.com:5432/postgres"
  // directUrl = env("DATABASE_NON_POOLED_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@map("accounts")
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // @@map("sessions")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id               String    @id @default(cuid())
  username         String?   @unique
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  newEmail         String?   @unique
  newEmailVerified DateTime?
  googleMail       String?
  googleImage      String?
  githubMail       String?
  githubImage      String?
  password         String?
  image            String?
  role             UserRole  @default(USER)
  accounts         Account[]
  sessions         Session[]
  // posts         Post[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  // @@map("verificationtokens")
  @@unique([identifier, token])
}

model EmailVerificationToken {
  identifier String   @id @default(cuid())
  token      String   @unique
  expires    DateTime
  email      String

  // @@map("verificationtokens")
  @@unique([email, token])
}

model DemoTable {
  id    String @id @default(cuid())
  value String
}
